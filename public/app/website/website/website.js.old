/**
 * Created by geekzwb on 2016/12/22.
 * 域名管理
 */
;(function (angular) {
    'use strict';
    
    angular.module('WebsiteDashboard', [])
        .service('WebsiteService', [
            '$http',
            '$q',
            'CommonService',
            '$timeout',
            'ServerService',
            'CountryService',
            'BrandService',
            'AdStatusService',
            'WebsiteStatusService',
            'HostService',
            function ($http, $q, CommonService, $timeout, ServerService, CountryService, BrandService, AdStatusService, WebsiteStatusService, HostService) {
                var me = this;
                //me.usersOptional = [{id:1,title:'1'},{id:2,title:'2'},{id:3,title:'3'},{id:4,title:'4'},{id:5,title:'5'}]; ng-table 要这种格式，id与title
                //=================相关数据
                ServerService.fnGetServers().then(function (r) {
                    me.domainServers = r;
                });
                CountryService.fnGetCountries().then(function (r) {
                    me.domainCountries = r;
                });
                BrandService.fnGetBrands().then(function (r) {
                    me.domainBrands = r;
                });
                AdStatusService.fnGetAdStatuses().then(function (r) {
                    me.domainAdStatuses = r;
                });
                WebsiteStatusService.fnGetWebsiteStatuses().then(function (r) {
                    me.domainWebsiteStatuses = r;
                });
                CommonService.fnGetusersOptional().then(function (r) {
                    me.usersOptional = r.data;
                });
                HostService.fnGetHosts().then(function (r) {
                   me.domainHosts = r;
                });

                me.websitesInfo = {};
                /**
                 *
                 * @param type 必须 cache or remote
                 * @param filterValue 必须，本地搜索 没有可为''
                 * @param searchRemoteInfo 该对象里面可选属性isSearchRemote,bool 类型，指代是否按条件搜索服务器，其他属性字段可选
                 * @param params ng-table的params,非必须
                 * @returns {Promise}   websites promise
                 */
                me.fnGetWebsites = function (type, filterValue, searchRemoteInfo, params) {
                    //params.page() * params.count() 未完待续：下一页，下一页，当本地数据量不够的时候 起始两页，当前页获取下一页内容，实现伪预加载？？？
                    //searchRemoteInfo = searchRemoteInfo || {};
                    type = type || 'cache';//cache or remote

                    console.log('searchRemoteInfo', searchRemoteInfo);

                    var isSearchRemote = false;
                    if(searchRemoteInfo.isSearchRemote) isSearchRemote = true;//带着fields去服务器搜索,并且结果不缓存

                    var deffered = $q.defer();

                    //先去除为空的字段
                    angular.forEach(searchRemoteInfo, function (value, key) {
                        if (value == null) delete searchRemoteInfo[key];
                    });

                    //首次拉取
                    if (angular.equals({}, me.websitesInfo)) {
                        console.log('first');
                       // searchRemoteInfo.take = 2 * params.count(); //???传不到下边！！！！？？？？
                        me.websitesInfo.data = [];
                    }

                    //当前页已经没有数据啦，需要从服务器获取
                    if(!isSearchRemote && params.page() * params.count() > me.websitesInfo.data.length && me.websitesInfo.data.length < me.websitesInfo.recordsTotal) {
                        type = 'remote';
                    }

                    //在非服务器搜索下，下一页的内容不够了,并且服务器数据没有拉取完，则需要preloadNext，并且将结果缓存到本地
                    var preloadNext = false;
                    if(!isSearchRemote && (params.page() + 1) * params.count() > me.websitesInfo.data.length && me.websitesInfo.data.length < me.websitesInfo.recordsTotal) {
                        preloadNext = true;
                    }

                    console.log('isSearchRemote', isSearchRemote);
                    console.log('searchRemoteInfo', searchRemoteInfo);
                    console.log('type', type);
                    console.log('me.websitesInfo.data.length', me.websitesInfo.data.length);

                    //======================当前页数据不够，拉取服务器 || 服务器搜索
                   if(angular.equals([], me.websitesInfo.data) || type == 'remote' || (isSearchRemote && me.websitesInfo.data.length < me.websitesInfo.recordsTotal)) {
                        //=========================== remote
                       searchRemoteInfo.currentPage = params.page();
                       searchRemoteInfo.countPerpage = params.count();
                       if (angular.equals([], me.websitesInfo.data) || type == 'remote') {
                           console.log('first');
                           searchRemoteInfo.takeCount = 2 * params.count();
                           console.log('searchRemoteInfo', searchRemoteInfo);
                       }

                       if(type == 'remote') {
                           //补足之前页的内容,以及下一页的内容
                           searchRemoteInfo.takeCount = (params.page() + 1) * params.count() - me.websitesInfo.data.length;
                           searchRemoteInfo.currentPage = me.websitesInfo.data.length/params.count() + 1;
                       }

                        $http.post("/website/index", searchRemoteInfo).then(function (r) {
                            if(r.data.status != 1) {
                                deffered.reject();
                                return;
                            }

                            //非服务器搜索时将结果缓存
                            if(angular.equals([], me.websitesInfo.data)) {
                                me.websitesInfo = r.data.data;//首次拉取，赋予
                            } else if (type == 'remote') {
                                me.websitesInfo.data = me.websitesInfo.data.concat(r.data.data.data);//当前页没有数据，并且非服务器搜索，拼接
                            }

                            if(angular.isUndefined(params)) {
                                var filteredData = CommonService.filterData(r.data.data.data,filterValue);
                                deffered.resolve(filteredData);
                                return;
                            }
                            params.total(me.websitesInfo.recordsTotal);

                            var transformedData = CommonService.transformData(me.websitesInfo.data, filterValue, params);
                            deffered.resolve(transformedData);
                        }).finally(function () {
                            delete searchRemoteInfo.takeCount;
                        });

                        return deffered.promise;

                    } else {
                       console.log('preload');
                       // 预加载下一页
                       if(preloadNext) {
                           //分页的一些参数,预加载下一页内容
                           searchRemoteInfo.currentPage = params.page()+1;
                           searchRemoteInfo.countPerpage = params.count();

                           $http.post("/website/index", searchRemoteInfo).then(function (r) {
                               me.websitesInfo.data = me.websitesInfo.data.concat(r.data.data.data);//拼接
                           })
                       }

                       console.log('me.websitesInfo.data', me.websitesInfo.data);
                            //================== local
                        var filteredData = CommonService.filterData(me.websitesInfo.data,filterValue);

                        //!ng-table
                        if(angular.isUndefined(params)) {
                            return $q.when(filteredData);
                        }

                        //filteredData = CommonService.filterData(filteredData,searchRemoteInfo);//数据已经全部在本地了

                        params.total(me.websitesInfo.recordsTotal);
                        var transformedData = CommonService.sliceOrderData(filteredData,params);
                        return $q.when(transformedData);
                    }
                };

                //新增
                me.fnAddWebsite = function (website) {
                    if(website.pending) return;
                    website.pending =true;
                    $http.post('/website', website)
                        .then(function (r) {
                            if(r.data.status == 1) {
                                website.addStatus = true;
                                me.websitesInfo = {};//reload
                                $timeout(function () {
                                    website.addStatus = null;
                                }, 2000);
                            } else {
                                website.addStatus = false;
                            }
                        }, function (e) {
                            website.addStatus = false;
                        })
                        .finally(function () {
                            website.pending = false;
                        })
                };

                //edit 修改
                me.fnEditWebsite = function (websiteInfo) {
                    if(websiteInfo.pending) return;
                    websiteInfo.pending =true;
                    $http.put('/website/'+websiteInfo.id, websiteInfo)
                        .then(function (r) {
                            if(r.data.status == 1) {
                                websiteInfo.editStatus = true;
                                me.websitesInfo = {};//reload
                                $timeout(function () {
                                    websiteInfo.editStatus = null;
                                }, 2000);
                            } else {
                                websiteInfo.editStatus = false;
                            }
                        }, function (e) {
                            websiteInfo.editStatus = false;
                        })
                        .finally(function () {
                            websiteInfo.pending = false;
                        });
                };

                //删除
                me.fnDestroyWebsite = function (id, deleteAction) {
                    if(deleteAction.pending) return; //正在删除
                    deleteAction.pending =true;
                    $http.delete('/website/'+id).then(function (r) {
                            if(r.data.status == 1) {
                                me.websitesInfo = {}; //reload：本地循环还是服务器remote重新拉取？
                                deleteAction.status = true; //成功
                                $timeout(function () {
                                    deleteAction.status = null;
                                }, 2000);
                            } else {
                                deleteAction.status = false;
                            }
                        })
                        .finally(function () {
                            deleteAction.pending = false;
                        });
                }
                
            }
        ])
        .controller('WebsiteIndexCtrl', [
            'WebsiteService',
            'NgTableParams',
            'dialogs',
            function (WebsiteService, NgTableParams, dialogs) {

                var getType = 'cache';// 每次去拉取posts的方式: cache or remote

                var self = this;

                self.WebsiteSer = WebsiteService;

                self.filterValue ='';

                self.deleteAction = {};//删除的状态 pendding 和 status

                self.$injet = ["NgTableParams", "ngTableSimpleList"];

                self.tableParams = createUsingFullOptions();

                // init
                function createUsingFullOptions() {
                    var initialParams = {
                        page: 1,
                        //sorting: { created_at: "desc" },
                        count: 2
                    };
                    var initialSettings = {
                        getData: function(params) {
                            return WebsiteService.fnGetWebsites(getType, self.filterValue, self.searchRemoteInfo,  params);
                        }
                    };
                    return new NgTableParams(initialParams, initialSettings);
                }

                //缓存筛选
                self.fnSearchChange = function () {
                    self.tableParams.reload();
                };

                //服务器筛选 service判断本地是否已经有全部数据了
                self.searchRemote = false;
                self.toggleSearch = function () {
                    self.searchRemote = !self.searchRemote;
                    if(self.searchRemote) {
                        self.searchRemoteInfo.isSearchRemote = true;
                    } else {
                        self.searchRemoteInfo.isSearchRemote = false;
                        self.tableParams.page(1);
                        self.tableParams.reload();
                    }
                };
                self.searchRemoteInfo = {};
                self.fnSearchRemote = function () {
                    self.tableParams.reload();
                };
                //确认删除模态框
                var dlg = null;
                self.fnDestoryPost = function (id) {
                    dlg = dialogs.confirm('Confirm','确定要删除该国家吗?',{size: 'sm'});
                    dlg.result.then(function(btn){
                        //确认删除
                        WebsiteService.fnDestroyWebsite(id, self.deleteAction);
                        getType = 'remote';
                        self.tableParams.reload().finally(function () {
                            getType = 'cache';
                        });//更新表格，重新拉取数据
                    },function(btn){
                        console.log('取消删除website');
                    });
                }

            }])
        .controller('WebsiteAddCtrl', [
            '$scope',
            'WebsiteService',
            function ($scope, WebsiteService) {
                $scope.websiteInfo = {};
                $scope.WebsiteSer = WebsiteService;
                $scope.fnAddWebsite = function () {
                    WebsiteService.fnAddWebsite($scope.websiteInfo);
                }
            }
        ])
        .controller('WebsiteEditCtrl', [
            '$scope',
            'WebsiteService',
            '$filter',
            'dialogs',
            function ($scope, WebsiteService, $filter, dialogs) {

                $scope.websiteInfo = {};
                $scope.WebsiteSer = WebsiteService;

                var websiteId = $scope.$stateParams.websiteId;

                WebsiteService.fnGetWebsites().then(function (r) {
                    var websitesInfo = $filter('filter')(r, {id: websiteId});
                    angular.forEach(websitesInfo, function (value, key) {
                        //所有的websites中取出id为postId的一条数据
                        if(value.id == websiteId) {
                            $scope.websiteInfo = value;
                            return false;
                        }
                    });

                    //没有这个website
                    if(angular.equals({}, $scope.websiteInfo)) {
                        dialogs.error('Error', '未找到该域名', {size:'sm'}).result.then(function (btn) {
                            $scope.$state.go('website.website.index');
                        });
                        return;
                    }
                });

                //提交修改
                $scope.fnEditWebsite = function () {
                    WebsiteService.fnEditWebsite($scope.websiteInfo);
                }
            }
        ]);
})(angular);